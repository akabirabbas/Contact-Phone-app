/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Phone_Application;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.Timer;

/**
 *
 * @author Akabir Abbas
 */
public class Call_Screen extends javax.swing.JFrame {
    static Map<String, CallHistoryEntry> callHistory = new HashMap<>();
    private Timer callTimer;
    private long callStartTime;

    /**
     * Creates new form Call_Screen
     */
    public Call_Screen() {
        initComponents();
        setStyles();  // Call the method to set styles
    }
    
    
    private static void addToCallHistory(String phoneNumber, long callTime) {
        CallHistoryEntry entry = new CallHistoryEntry(phoneNumber, callTime);
        callHistory.put(phoneNumber, entry);
    }
    public static void clearCallHistory() {
        callHistory.clear();
    }
    
    
    public void setDialedNumber(String dialedNumber) {
        // Start the call timer when the screen is true
        startCallTimer();
        // Assuming jLabel2 is the JLabel to display the dialed number
        jLabel2.setText("<html><div style='text-align: center;'>" + dialedNumber + "</div></html>");
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addToCallHistory(dialedNumber, System.currentTimeMillis());   
    }

    private void startCallTimer() {
    // Stop the existing timer if it's running
    stopCallTimer();

    callStartTime = System.currentTimeMillis();
    callTimer = new Timer(1000, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Calculate the elapsed time and display it on jLabel3
            long elapsedTime = (System.currentTimeMillis() - callStartTime) / 1000;
            jLabel3.setText(formatCallTime(elapsedTime));
        }
    });
    callTimer.start();
}

private void stopCallTimer() {
    if (callTimer != null && callTimer.isRunning()) {
        callTimer.stop();
    }
}


private String formatCallTime(long elapsedSeconds) {
    // Format the call time as HH:MM:SS
    long hours = elapsedSeconds / 3600;
    long minutes = (elapsedSeconds % 3600) / 60;
    long seconds = elapsedSeconds % 60;
    
    return String.format("%02d:%02d:%02d", hours, minutes, seconds);
}


private void setStyles() {
    // Set background color or image
    getContentPane().setBackground(new java.awt.Color(240, 240, 240)); // You can change the color as per your choice

   
    // Set button styles
    javax.swing.JButton[] buttons = {jButton1};

    for (javax.swing.JButton button : buttons) {
        button.setBackground(new java.awt.Color(255, 255, 255)); // Button background color
        button.setFont(new java.awt.Font("Tahoma", 1, 14)); // Button font
        
        button.setOpaque(false); // Make the button transparent
        button.setContentAreaFilled(false); // Don't paint the inside of the button
        button.setBorderPainted(false); // Don't paint the border of the button
    }
        
         // Set font color using RGB values
        int red = 134;   // Replace with your desired RGB values
        int green = 134;
        int blue = 141;
        
        int cred = 57;
        int cgrn = 212;
        int cblue = 108;
        
        Color textColor = new Color(red, green, blue);
        Color callTextColor = new Color(cred, cgrn, cblue);
        

        jButton1.setForeground(Color.red);
        // Set the background color with transparency for jButton1
        jButton1.setBackground(new Color(255, 255, 255, 25)); // Adjust the alpha value to set transparency

        
         // Set font color of jLabel1 to white
    jLabel1.setForeground(Color.WHITE);
    jLabel2.setForeground(Color.WHITE);
    jLabel3.setForeground(Color.WHITE);
    }


    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Ringing");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 60, 30));

        jButton1.setText("Cut");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 360, 40, 30));

        jLabel2.setText("Number");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 160, 41));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 80, 20));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Phone_Application/calling.png"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 200, 420));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // When "Cut" button is clicked
        // Stop the timer
        
        //edit chab=nges
        stopCallTimer();

        //callTimer.stop();
        // Add the call to the call history
        addToCallHistory(jLabel2.getText(), System.currentTimeMillis());
        
        // Switch to the Call_History frame
        Call_History callHistoryFrame = new Call_History();
        callHistoryFrame.updateCallHistory(callHistory.keySet());
        callHistoryFrame.setVisible(true);

        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Call_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Call_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Call_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Call_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Call_Screen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables

    static class CallHistoryEntry {
        private String phoneNumber;
        private long callTime;

        public CallHistoryEntry(String phoneNumber, long callTime) {
            this.phoneNumber = phoneNumber;
            this.callTime = callTime;
        }
        
        

        public String getPhoneNumber() {
            return phoneNumber;
        }

        public long getCallTime() {
            return callTime;
        }
        
        public String getFormattedCallTime() {
            // Assuming you want to display call time in seconds
            long elapsedSeconds = (System.currentTimeMillis() - callTime) / 1000;
            return Long.toString(elapsedSeconds) + " seconds";
        }
    }

}
